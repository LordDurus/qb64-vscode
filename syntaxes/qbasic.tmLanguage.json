{
	"scopeName": "source.qbasic",
	"uuid": "e7de52b7-8378-4396-848e-e9da04e24ddb",
	"fileTypes": [
		"bas",
		"qb",
		"qbasic"
	],
	"name": "QBasic",
	"patterns": [
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.qbasic"
				}
			},
			"comment": "Comment",
			"match": "(').*",
			"name": "comment.line.qbasic"
		},
		{
			"comment": "Delimiter",
			"match": "[,:;]",
			"name": "meta.delimiter.object.qbasic"
		},
		{
			"comment": "Keyword",
			"match": "(?i)(\\b((END )?IF|(END )?SELECT|(RESUME )?NEXT|CASE|CLOSE|DO|ELSE|FOR|GOSUB|GOTO|LOOP|ON|OPEN|RETURN|THEN|TO|UNTIL|WHILE)\\b)",
			"name": "keyword.control.qbasic"
		},
		{
			"comment": "Function",
			"match": "(?i)(\\b(CHR$|CLS|COLOR|DATA|INPUT|INT|KEY|LEN|LINE|LOCATE|PALETTE|PLAY|PRINT|PSET|PUT|REDIM|RND|SCREEN|TAB|VIEW)\\b)",
			"name": "support.function.qbasic"
		},
		{
			"comment": "Operator",
			"match": "(?i)((\\+|=|<|>|    <>|AND|OR))",
			"name": "keyword.operator.qbasic"
		},
		{
			"comment": "Numeric",
			"match": "\\b(\\d(\\.\\d)?)+",
			"name": "constant.numeric.qbasic"
		},
		{
			"comment": "Global",
			"match": "\\b\\w+\\$",
			"name": "constant.global.qbasic"
		},
		{
			"captures": {
				"1": {
					"name": "entity.name.function.qbasic"
				}
			},
			"comment": "SUB",
			"match": "(?i)(^(\\w+):)",
			"name": "meta.function.qbasic"
		},
		{
			"comment": "Brace, round",
			"match": "[\\(\\)]",
			"name": "meta.brace.round.qbasic"
		},
		{
			"comment": "Brace, curly",
			"match": "[\\{\\}]",
			"name": "meta.brace.curly.qbasic"
		},
		{
			"begin": "(\\w+\\()",
			"beginCaptures": {
				"1": {
					"name": "constant.array.qbasic"
				}
			},
			"comment": "Array",
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "constant.array.qbasic"
				}
			},
			"name": "other.array.qbasic",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "(\")",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.string.begin.qbasic"
				}
			},
			"comment": "String, double-quoted",
			"end": "(\")",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.begin.qbasic"
				}
			},
			"name": "string.quoted.double.qbasic",
			"patterns": [
				{
					"comment": "Escaped double-quote inside double-quoted string",
					"match": "(\\\")",
					"name": "constant.character.escape.qbasic"
				},
				{
					"comment": "Single quote inside double-quoted string",
					"match": "(')",
					"name": "other.qbasic"
				},
				{
					"include": "$self"
				}
			]
		}
	]
}